/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/company": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get company data. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Company"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/company/serie": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get company's invoice series */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["InvoiceSerie"][];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/account": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of the company's accounts */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["BankAccount"][];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/account/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a specific company's account */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the account to retrieve */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Account"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/provider": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of providers. */
    get: {
      parameters: {
        query?: {
          /** @description Number of items per page. */
          page_size?: number;
          /** @description Page number. */
          page?: number;
          /** @description Search query for trade name, address, CIF, phone, and email */
          q?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Provider"][];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    /** Add a new provider. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Provider"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Provider"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/provider/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a specific provider. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the provider to retrieve. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Provider"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a provider. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the provider to update. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Provider"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Provider"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete a provider. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the provider to delete. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/customer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of customers. */
    get: {
      parameters: {
        query?: {
          /** @description Number of items per page. */
          page_size?: number;
          /** @description Page number. */
          page?: number;
          /** @description Search query for trade name, address, CIF, phone, and email */
          q?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Customer"][];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    /** Add a new customer. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Customer"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/customer/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a specific customer. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the customer to retrieve. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Customer"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a customer. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the customer to update. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Customer"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Customer"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete a customer. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the customer to delete. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/invoice": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of invoices. */
    get: {
      parameters: {
        query?: {
          /** @description Number of items per page. */
          page_size?: number;
          /** @description Page number. */
          page?: number;
          /** @description ID of the customer to filter by */
          customer?: number;
          /** @description Minimum invoice total */
          min_total_limit?: number;
          /** @description Maximum invoice total */
          max_total_limit?: number;
          /** @description Initial date to filter by */
          initial_date?: string;
          /** @description End date to filter by */
          end_date?: string;
          /** @description Invoice series */
          serie?: string;
          /** @description Text to search within the invoice description */
          description?: string;
          /** @description True to show issued invoices, false to show draft invoices. */
          issued?: boolean;
          /** @description Comma separated list of sorting criteria, using the format 'key:order'. Accepted keys: customer, description, total_base, total_invoice, number, date. Accepted orders: asc, desc. */
          sort?: string;
          /** @description Comma separated list of tags to filter by. */
          tags?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Invoice"][];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    /** Add a new invoice. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Invoice"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/invoice/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a specific invoice. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the invoice to retrieve. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Invoice"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update an invoice. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the invoice to update. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Invoice"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Invoice"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete an invoice. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the invoice to delete. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/invoice/{id}/public": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the public link for an invoice. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the invoice to get public link. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "text/plain": string;
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/invoice/{id}/charges": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update the charges of an invoice. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the invoice to update charges. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            charges?: components["schemas"]["InvoiceCharge"][];
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Invoice"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/invoice/{id}/email": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Send an email with an invoice. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the invoice to send by email. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            /** @description Email addresses of the recipients. */
            to?: string[];
            /** @description Reply-to email address. */
            reply_to?: string;
            /** @description Subject of the email. */
            subject?: string;
            /** @description Body of the email. */
            body?: string;
            /** @description Email addresses to send in cc. */
            cc?: string[];
            /** @description Send a copy of the email to the user. */
            cc_me?: boolean;
            /** @description Shows a payment button in the email. */
            show_card_payment?: boolean;
            /** @description Include PDF of the invoice. */
            include_pdf?: boolean;
            /** @description Attachments for the email */
            attachments?: {
              /** @description Filename of the attachment */
              filename?: string;
              /** @description Attachment in Base64 */
              data?: string;
            }[];
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/invoice/{id}/pdf": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Download the PDF file of an invoice. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the invoice to get the PDF. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/octet-stream": string;
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/income": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of incomes. */
    get: {
      parameters: {
        query?: {
          /** @description Number of items per page. */
          page_size?: number;
          /** @description Page number. */
          page?: number;
          /** @description ID of the customer to filter by */
          customer?: number;
          /** @description Minimum income total */
          min_total_limit?: number;
          /** @description Maximum income total */
          max_total_limit?: number;
          /** @description Initial date to filter by */
          initial_date?: string;
          /** @description End date to filter by */
          end_date?: string;
          /** @description Comma separated list of sorting criteria, using the format 'key:order'. Accepted keys: customer, document_number, total_base, total_income, date. Accepted orders: asc, desc. */
          sort?: string;
          /** @description Comma separated list of tags to filter by. */
          tags?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Income"][];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    /** Add a new income. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Income"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Income"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/income/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a specific income. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the income to retrieve. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Income"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update an income. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the income to update. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Income"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Income"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete an income. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the income to delete. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/income/{id}/attachment": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the attachment of an income. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the income to get the attachment. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Attachment"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update the attachment of an income. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the income to update attachment. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Attachment"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Attachment"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete the attachment of an income. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the income to delete the attachment. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/income/{id}/charges": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update the charges of an income. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the income to update charges. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            charges?: components["schemas"]["IncomeCharge"][];
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Income"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/expense": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of expenses. */
    get: {
      parameters: {
        query?: {
          /** @description Number of items per page. */
          page_size?: number;
          /** @description Page number. */
          page?: number;
          /** @description ID of the provider to filter by */
          provider?: number;
          /** @description Minimum expense total */
          min_total_limit?: number;
          /** @description Maximum expense total */
          max_total_limit?: number;
          /** @description Initial date to filter by */
          initial_date?: string;
          /** @description End date to filter by */
          end_date?: string;
          /** @description Type of expense to filter by */
          expense_type?: string;
          /** @description Type of investment to filter by */
          investment_type?: string;
          /** @description True to show drafts, false to show confirmed expenses */
          draft?: boolean;
          /** @description Comma separated list of sorting criteria, using the format 'key:order'. Accepted keys: provider, document_number, total_base, total_expense, date. Accepted orders: asc, desc. */
          sort?: string;
          /** @description Comma separated list of tags to filter by. */
          tags?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Expense"][];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    /** Add a new expense. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Expense"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/expense/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a specific expense. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the expense to retrieve. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Expense"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update an expense. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the expense to update. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Expense"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Expense"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete an expense. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the expense to delete. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/expense/{id}/attachment": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the attachment of an expense. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the expense to get the attachment. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Attachment"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update the attachment of an expense. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the expense to update attachment. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Attachment"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Attachment"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete the attachment of an expense. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the expense to delete the attachment. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/expense/{id}/payments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    /** Update the payments of an expense. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the expense to update payments. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            payments?: components["schemas"]["ExpensePayment"][];
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Expense"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/document": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of documents. */
    get: {
      parameters: {
        query?: {
          /** @description Number of items per page. */
          page_size?: number;
          /** @description Page number. */
          page?: number;
          /** @description Sorting criteria, format key:order. */
          sort?: string;
          /** @description Initial date to filter by. */
          initial_date?: string;
          /** @description End date to filter by. */
          end_date?: string;
          /** @description Keyword to search in document name or subject */
          keyword?: string;
          /** @description True to get processed documents, false to get pending */
          assigned?: boolean;
          /** @description Comma separated list of document extensions to filter by. Prefix with ! to exclude extensions. */
          extension?: string;
          /** @description Hash of the file in MD5 algorithm. */
          hash?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Document"][];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    /** Add a new document. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            attachment?: components["schemas"]["Attachment"];
            /**
             * Format: date
             * @description Date of the document
             */
            date?: string;
            /** @description ID of the expense associated to the document */
            expense_id?: number;
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/document/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a specific document. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the document to retrieve. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a document. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the document to update. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": {
            attachment?: components["schemas"]["Attachment"];
            /**
             * Format: date
             * @description Date of the document
             */
            date?: string;
            /** @description ID of the expense associated to the document */
            expense_id?: number;
          };
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Document"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete a document. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the document to delete. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/document/{id}/attachment": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get the attachment of a document. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the document to get the attachment. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Attachment"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/tag": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of tags. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Tag"][];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transfer": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a list of transfers. */
    get: {
      parameters: {
        query?: {
          /** @description ID of the origin account to filter by. */
          origin_account?: number;
          /** @description ID of the destination account to filter by. */
          destination_account?: number;
          /** @description Payment method to filter by. */
          payment_method?: "cash" | "wire_transfer" | "promissory_note";
          /** @description Sorting order (asc or desc). */
          sort?: "asc" | "desc";
          /** @description Number of items per page. */
          page_size?: number;
          /** @description Page number. */
          page?: number;
          /** @description Minimum transfer total */
          min_total_limit?: number;
          /** @description Maximum transfer total */
          max_total_limit?: number;
          /** @description Initial date to filter by. */
          initial_date?: string;
          /** @description End date to filter by. */
          end_date?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Transfer"][];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    put?: never;
    /** Create a new transfer. */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Transfer"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Transfer"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/transfer/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get a specific transfer. */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the transfer to retrieve. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Transfer"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    /** Update a transfer. */
    put: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the transfer to update. */
          id: number;
        };
        cookie?: never;
      };
      requestBody: {
        content: {
          "application/json": components["schemas"]["Transfer"];
        };
      };
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Transfer"];
          };
        };
        /** @description Bad Request */
        400: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    post?: never;
    /** Delete a transfer. */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description ID of the transfer to delete. */
          id: number;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content?: never;
        };
        /** @description Forbidden */
        403: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Not Found */
        404: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Internal Server Error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    Error: {
      /** @description HTTP error code */
      code?: number;
      /** @description Error message */
      message?: string;
    };
    Company: {
      cif?: string;
      tradename?: string;
      business_name?: string;
      name?: string;
      surname_1?: string;
      surname_2?: string;
      address?: string;
      postal_code?: string;
      town?: string;
      region?: string;
      country_code?: string;
      phone?: string;
      email?: string;
      web?: string;
      fax?: string;
      logo?: string;
      series?: components["schemas"]["InvoiceSerie"][];
    };
    InvoiceSerie: {
      /** @description Name of the invoice series */
      name?: string;
      /** @description Description of the invoice series */
      description?: string;
    };
    Account: {
      /** @description Unique identifier of the account */
      id?: number;
      /** @description Name of the account */
      name?: string;
      /** @description Account number */
      account_number?: string;
      /** @description Description of the account */
      description?: string;
      /** @description Name of the bank */
      bank_name?: string;
    };
    BankAccount: {
      /** @description Unique identifier of the bank account */
      id?: number;
      /** @description Name of the bank account */
      name?: string;
      /** @description IBAN number of the bank account */
      iban?: string;
      /** @description Name of the bank */
      bank_name?: string;
    };
    Provider: {
      /** @description Unique identifier of the provider. */
      id?: number;
      /** @description Street address. */
      address?: string;
      /** @description City. */
      town?: string;
      /** @description Postal code. */
      postal_code?: string;
      /** @description Unique tax identification number. */
      cif?: string;
      /** @description Trade name. */
      tradename?: string;
      /** @description Business name. */
      business_name?: string;
      /** @description Name of the individual. */
      name?: string;
      /** @description First surname of the individual. */
      surname_1?: string;
      /** @description Second surname of the individual. */
      surname_2?: string;
      /** @description Type of business (individual, company, others). */
      business_type?: string;
      /** @description Region if country is Spain. */
      region?: string;
      /** @description Country code in ISO 3166-1 format, defaults to ES. */
      country_code?: string;
      /** @description Default payment method. */
      default_payment_method?: string;
      /** @description Fax number. */
      fax?: string;
      /** @description Phone number. */
      phone?: string;
      /** @description Web address. */
      web?: string;
      /** @description Email address. */
      email?: string;
      /** @description Contact person. */
      contact_person?: string;
      /** @description Personal comments. */
      personal_comment?: string;
      /** @description Default withholding tax. */
      default_retention?: number;
      /** @description Default expense type. */
      default_expense_type?: string;
    };
    Customer: {
      /** @description Unique identifier of the customer. */
      id?: number;
      /** @description Street address. */
      address?: string;
      /** @description City. */
      town?: string;
      /** @description Postal code. */
      postal_code?: string;
      /** @description Unique tax identification number. */
      cif?: string;
      /** @description Trade name. */
      tradename?: string;
      /** @description Business name. */
      business_name?: string;
      /** @description Name of the individual. */
      name?: string;
      /** @description First surname of the individual. */
      surname_1?: string;
      /** @description Second surname of the individual. */
      surname_2?: string;
      /** @description Type of business (individual, company, others). */
      business_type?: string;
      /** @description Region if country is Spain. */
      region?: string;
      /** @description Country code in ISO 3166-1 format, defaults to ES. */
      country_code?: string;
      /** @description Default payment method. */
      default_payment_method?: string;
      /** @description Fax number. */
      fax?: string;
      /** @description Phone number. */
      phone?: string;
      /** @description Web address. */
      web?: string;
      /** @description Email address. */
      email?: string;
      /** @description Contact person. */
      contact_person?: string;
      /** @description Personal comments. */
      personal_comment?: string;
      /** @description Default language of invoice for this customer */
      default_invoice_language?: string;
      /** @description Determines if the invoices for this customer have surcharges by default. */
      has_surcharge?: boolean;
    };
    Invoice: {
      /** @description Unique identifier of the invoice */
      id?: number;
      /** @description Invoice description */
      description?: string;
      /** @description Invoice annotations */
      annotations?: string;
      /**
       * Format: date
       * @description Invoice date
       */
      date?: string;
      /** @description Invoice serie */
      serie?: string;
      /** @description Invoice tags */
      tags?: string[];
      /** @description Defines if it's a draft or a issued invoice */
      issued?: boolean;
      /** @description Invoice number */
      number?: number;
      /** @description Customer ID */
      customer?: number;
      /** @description Default invoice footer from the user configuration */
      footer?: string;
      /** @description Default IRM field for invoices from the user configuration */
      irm?: string;
      invoice_lines?: components["schemas"]["InvoiceLine"][];
      charges?: components["schemas"]["InvoiceCharge"][];
    };
    InvoiceLine: {
      /** @description Unique identifier for the invoice line */
      id?: number;
      quantity?: number;
      concept?: string;
      amount?: number;
      discount?: number;
      tax?: number;
      surcharge?: number;
      retention?: number;
    };
    InvoiceCharge: {
      /** @description Unique identifier for the charge */
      id?: number;
      /**
       * Format: date
       * @description Date of the charge
       */
      date?: string;
      amount?: number;
      /**
       * @description Payment method
       * @enum {string}
       */
      method?:
        | "cash"
        | "receipt"
        | "wire_transfer"
        | "card"
        | "promissory_note"
        | "other";
      /** @description ID of the user's account where the payment will be received. */
      destination_account?: number;
      /** @description Customer's account number from which payment was made */
      origin_account?: string;
      /** @description Determines if the payment was completed */
      charged?: boolean;
    };
    Income: {
      /** @description Unique identifier of the income */
      id?: number;
      /** @description ID of the customer */
      customer?: number;
      /**
       * Format: date
       * @description Date of the income
       */
      date?: string;
      /** @description Income tags */
      tags?: string[];
      /**
       * @description Type of document
       * @enum {string}
       */
      document_type?:
        | "other_invoice"
        | "cash_statement"
        | "interest_settlement"
        | "bank_doc"
        | "contract"
        | "resolution"
        | "other_doc";
      /** @description Document number */
      document_number?: string;
      /** @description Personal comments about the income */
      annotations?: string;
      income_lines?: components["schemas"]["IncomeLine"][];
      charges?: components["schemas"]["IncomeCharge"][];
      /** @description Document attachment */
      attachment?: Record<string, never>;
    };
    IncomeLine: {
      /** @description Unique identifier of the income line */
      id?: number;
      concept?: string;
      amount?: number;
      tax?: number;
      retention?: number;
      imputation?: number;
      /** @description Type of the income */
      income_type?: string;
    };
    IncomeCharge: {
      /** @description Unique identifier for the charge */
      id?: number;
      /**
       * Format: date
       * @description Date of the charge
       */
      date?: string;
      amount?: number;
      /**
       * @description Payment method
       * @enum {string}
       */
      method?:
        | "cash"
        | "receipt"
        | "wire_transfer"
        | "card"
        | "promissory_note"
        | "other";
      /** @description ID of the user's account where the payment will be received. */
      destination_account?: number;
      /** @description Customer's account number from which payment was made */
      origin_account?: string;
      /** @description Determines if the payment was completed */
      charged?: boolean;
    };
    Expense: {
      /** @description Unique identifier of the expense */
      id?: number;
      /**
       * Format: date
       * @description Date of the expense
       */
      date?: string;
      /** @description Defines if it's a draft or a confirmed expense */
      draft?: boolean;
      /** @description ID of the provider */
      provider?: number;
      /**
       * @description Type of document
       * @enum {string}
       */
      document_type?: "invoice" | "ticket";
      /** @description Document number */
      document_number?: string;
      /** @description Expense tags */
      tags?: string[];
      /** @description Personal comments about the expense */
      annotations?: string;
      expense_lines?: components["schemas"]["ExpenseLine"][];
      payments?: components["schemas"]["ExpensePayment"][];
      /** @description Document attachment */
      attachment?: Record<string, never>;
    };
    ExpenseLine: {
      /** @description Unique identifier of the expense line */
      id?: number;
      description?: string;
      base?: number;
      tax?: number;
      surcharge?: number;
      retention?: number;
      imputation?: number;
      expense_type?: string;
      investment?: boolean;
      investment_data?: components["schemas"]["InvestmentData"];
    };
    ExpensePayment: {
      /** @description Unique identifier for the payment */
      id?: number;
      /**
       * Format: date
       * @description Date of the payment
       */
      date?: string;
      amount?: number;
      /**
       * @description Payment method
       * @enum {string}
       */
      payment_method?:
        | "cash"
        | "receipt"
        | "wire_transfer"
        | "card"
        | "promissory_note"
        | "other";
      /** @description Determines if the payment was completed */
      paid?: boolean;
      /** @description ID of the user's account from which the payment will be made */
      origin_account?: number;
      /** @description Supplier's account number to which payment was made */
      destination_account?: string;
    };
    InvestmentData: {
      investment_type?: string;
      value?: number;
      /** Format: date */
      start_date?: string;
      /** Format: date */
      end_date?: string;
      duration?: number;
      used?: boolean;
    };
    Document: {
      /** @description Unique identifier of the document */
      id?: number;
      /**
       * Format: date
       * @description Date of the document
       */
      date?: string;
      /** @description ID of the expense associated to the document */
      expense_id?: number;
      /** @description Document attachment */
      attachment?: Record<string, never>;
    };
    Tag: {
      /** @description Unique identifier of the tag */
      id?: number;
      /** @description Tag name */
      name?: string;
    };
    Transfer: {
      /** @description Unique identifier of the transfer */
      id?: number;
      amount?: number;
      /** @enum {string} */
      payment_method?: "cash" | "wire_transfer" | "promissory_note";
      /**
       * Format: date
       * @description Date of the transfer
       */
      date?: string;
      concept?: string;
      /** @description ID of the destination account */
      destination_account?: number;
      /** @description ID of the origin account */
      origin_account?: number;
    };
    Attachment: {
      /** @description File name for the attachment */
      filename?: string;
      /** @description File encoded in Base64 format */
      data?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
